// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Authors", testAuthors)
	t.Run("BookAuthors", testBookAuthors)
	t.Run("Books", testBooks)
}

func TestDelete(t *testing.T) {
	t.Run("Authors", testAuthorsDelete)
	t.Run("BookAuthors", testBookAuthorsDelete)
	t.Run("Books", testBooksDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Authors", testAuthorsQueryDeleteAll)
	t.Run("BookAuthors", testBookAuthorsQueryDeleteAll)
	t.Run("Books", testBooksQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Authors", testAuthorsSliceDeleteAll)
	t.Run("BookAuthors", testBookAuthorsSliceDeleteAll)
	t.Run("Books", testBooksSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Authors", testAuthorsExists)
	t.Run("BookAuthors", testBookAuthorsExists)
	t.Run("Books", testBooksExists)
}

func TestFind(t *testing.T) {
	t.Run("Authors", testAuthorsFind)
	t.Run("BookAuthors", testBookAuthorsFind)
	t.Run("Books", testBooksFind)
}

func TestBind(t *testing.T) {
	t.Run("Authors", testAuthorsBind)
	t.Run("BookAuthors", testBookAuthorsBind)
	t.Run("Books", testBooksBind)
}

func TestOne(t *testing.T) {
	t.Run("Authors", testAuthorsOne)
	t.Run("BookAuthors", testBookAuthorsOne)
	t.Run("Books", testBooksOne)
}

func TestAll(t *testing.T) {
	t.Run("Authors", testAuthorsAll)
	t.Run("BookAuthors", testBookAuthorsAll)
	t.Run("Books", testBooksAll)
}

func TestCount(t *testing.T) {
	t.Run("Authors", testAuthorsCount)
	t.Run("BookAuthors", testBookAuthorsCount)
	t.Run("Books", testBooksCount)
}

func TestHooks(t *testing.T) {
	t.Run("Authors", testAuthorsHooks)
	t.Run("BookAuthors", testBookAuthorsHooks)
	t.Run("Books", testBooksHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Authors", testAuthorsInsert)
	t.Run("Authors", testAuthorsInsertWhitelist)
	t.Run("BookAuthors", testBookAuthorsInsert)
	t.Run("BookAuthors", testBookAuthorsInsertWhitelist)
	t.Run("Books", testBooksInsert)
	t.Run("Books", testBooksInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BookAuthorToBookUsingBook", testBookAuthorToOneBookUsingBook)
	t.Run("BookAuthorToAuthorUsingAuthor", testBookAuthorToOneAuthorUsingAuthor)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AuthorToBookAuthors", testAuthorToManyBookAuthors)
	t.Run("BookToBookAuthors", testBookToManyBookAuthors)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BookAuthorToBookUsingBookAuthors", testBookAuthorToOneSetOpBookUsingBook)
	t.Run("BookAuthorToAuthorUsingBookAuthors", testBookAuthorToOneSetOpAuthorUsingAuthor)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AuthorToBookAuthors", testAuthorToManyAddOpBookAuthors)
	t.Run("BookToBookAuthors", testBookToManyAddOpBookAuthors)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Authors", testAuthorsReload)
	t.Run("BookAuthors", testBookAuthorsReload)
	t.Run("Books", testBooksReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Authors", testAuthorsReloadAll)
	t.Run("BookAuthors", testBookAuthorsReloadAll)
	t.Run("Books", testBooksReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Authors", testAuthorsSelect)
	t.Run("BookAuthors", testBookAuthorsSelect)
	t.Run("Books", testBooksSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Authors", testAuthorsUpdate)
	t.Run("BookAuthors", testBookAuthorsUpdate)
	t.Run("Books", testBooksUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Authors", testAuthorsSliceUpdateAll)
	t.Run("BookAuthors", testBookAuthorsSliceUpdateAll)
	t.Run("Books", testBooksSliceUpdateAll)
}
