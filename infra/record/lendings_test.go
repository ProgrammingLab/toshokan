// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLendings(t *testing.T) {
	t.Parallel()

	query := Lendings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLendingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLendingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Lendings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLendingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LendingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLendingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LendingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Lending exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LendingExists to return true, but got false.")
	}
}

func testLendingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lendingFound, err := FindLending(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lendingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLendingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Lendings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLendingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Lendings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLendingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lendingOne := &Lending{}
	lendingTwo := &Lending{}
	if err = randomize.Struct(seed, lendingOne, lendingDBTypes, false, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}
	if err = randomize.Struct(seed, lendingTwo, lendingDBTypes, false, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lendingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lendingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lendings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLendingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lendingOne := &Lending{}
	lendingTwo := &Lending{}
	if err = randomize.Struct(seed, lendingOne, lendingDBTypes, false, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}
	if err = randomize.Struct(seed, lendingTwo, lendingDBTypes, false, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lendingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lendingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lendingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Lending) error {
	*o = Lending{}
	return nil
}

func lendingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Lending) error {
	*o = Lending{}
	return nil
}

func lendingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Lending) error {
	*o = Lending{}
	return nil
}

func lendingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Lending) error {
	*o = Lending{}
	return nil
}

func lendingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Lending) error {
	*o = Lending{}
	return nil
}

func lendingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Lending) error {
	*o = Lending{}
	return nil
}

func lendingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Lending) error {
	*o = Lending{}
	return nil
}

func lendingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Lending) error {
	*o = Lending{}
	return nil
}

func lendingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Lending) error {
	*o = Lending{}
	return nil
}

func testLendingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Lending{}
	o := &Lending{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lendingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Lending object: %s", err)
	}

	AddLendingHook(boil.BeforeInsertHook, lendingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lendingBeforeInsertHooks = []LendingHook{}

	AddLendingHook(boil.AfterInsertHook, lendingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lendingAfterInsertHooks = []LendingHook{}

	AddLendingHook(boil.AfterSelectHook, lendingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lendingAfterSelectHooks = []LendingHook{}

	AddLendingHook(boil.BeforeUpdateHook, lendingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lendingBeforeUpdateHooks = []LendingHook{}

	AddLendingHook(boil.AfterUpdateHook, lendingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lendingAfterUpdateHooks = []LendingHook{}

	AddLendingHook(boil.BeforeDeleteHook, lendingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lendingBeforeDeleteHooks = []LendingHook{}

	AddLendingHook(boil.AfterDeleteHook, lendingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lendingAfterDeleteHooks = []LendingHook{}

	AddLendingHook(boil.BeforeUpsertHook, lendingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lendingBeforeUpsertHooks = []LendingHook{}

	AddLendingHook(boil.AfterUpsertHook, lendingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lendingAfterUpsertHooks = []LendingHook{}
}

func testLendingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLendingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lendingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLendingToOneBookUsingBook(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Lending
	var foreign Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lendingDBTypes, false, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BookID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Book().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LendingSlice{&local}
	if err = local.L.LoadBook(ctx, tx, false, (*[]*Lending)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Book = nil
	if err = local.L.LoadBook(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLendingToOneSetOpBookUsingBook(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Lending
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lendingDBTypes, false, strmangle.SetComplement(lendingPrimaryKeyColumns, lendingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Book{&b, &c} {
		err = a.SetBook(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Book != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Lendings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BookID))
		reflect.Indirect(reflect.ValueOf(&a.BookID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID, x.ID)
		}
	}
}

func testLendingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLendingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LendingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLendingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lendings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lendingDBTypes = map[string]string{`ID`: `bigint`, `BookID`: `uuid`, `UserID`: `bigint`, `LentAt`: `timestamp without time zone`, `ReturnedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testLendingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lendingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lendingAllColumns) == len(lendingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLendingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lendingAllColumns) == len(lendingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Lending{}
	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lendingDBTypes, true, lendingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lendingAllColumns, lendingPrimaryKeyColumns) {
		fields = lendingAllColumns
	} else {
		fields = strmangle.SetComplement(
			lendingAllColumns,
			lendingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LendingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLendingsUpsert(t *testing.T) {
	t.Parallel()

	if len(lendingAllColumns) == len(lendingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Lending{}
	if err = randomize.Struct(seed, &o, lendingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Lending: %s", err)
	}

	count, err := Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lendingDBTypes, false, lendingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Lending struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Lending: %s", err)
	}

	count, err = Lendings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
