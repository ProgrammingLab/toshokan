// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteSessionsHandlerFunc turns a function with the right signature into a delete sessions handler
type DeleteSessionsHandlerFunc func(DeleteSessionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteSessionsHandlerFunc) Handle(params DeleteSessionsParams) middleware.Responder {
	return fn(params)
}

// DeleteSessionsHandler interface for that can handle valid delete sessions params
type DeleteSessionsHandler interface {
	Handle(DeleteSessionsParams) middleware.Responder
}

// NewDeleteSessions creates a new http.Handler for the delete sessions operation
func NewDeleteSessions(ctx *middleware.Context, handler DeleteSessionsHandler) *DeleteSessions {
	return &DeleteSessions{Context: ctx, Handler: handler}
}

/*DeleteSessions swagger:route DELETE /sessions sessions deleteSessions

ログアウト

ログアウトする。

*/
type DeleteSessions struct {
	Context *middleware.Context
	Handler DeleteSessionsHandler
}

func (o *DeleteSessions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteSessionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
